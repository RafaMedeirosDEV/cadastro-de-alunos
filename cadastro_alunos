#criar interface gráfica
#criar classes para organizar o código# integração com banco de dados Sqlite campo de cadastro de Nome, nascimento, cpf, cartão do sus, contato do responsável, alergias, observações.
# botoes de registrar, alterar, deletar , limpar tela, buscar
# mostrar na tela.

from tkinter import *
from tkinter import ttk
import sqlite3

interface = Tk()

#criando a função de Limpar a Tela
class Funcoes():
    def limpar_tela(self):
        self.nome_entry.delete(0,END)
        self.cpf_entry.delete(0,END)
        self.nascimento_entry.delete(0,END)
        self.sus_entry.delete(0,END)
        self.telefone_entry.delete(0,END)
        self.alergia_entry.delete(0,END)
        self.observacao_entry.delete(0,END)
    #criar função de para conexão com Banco de dados
    def conecta_bd(self):
        self.conn = sqlite3.connect('dados_alunos.bd')
        self.cursor = self.conn.cursor();print('Conectando ao banco de Dados')
    #desconectar o banco de dados
    def desconecta_bd(self):
        self.conn.close();print('Conexão desativada')

    def montaTabela(self):
        self.conecta_bd();print('Conectado')
        #montando a tabela de cadastro de dados básicos do Aluno
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS aluno(
                nome CHAR(50),
                cpf VARCHAR(11) NOT NULL PRIMARY KEY,
                nascimento DATE(8),
                sus Varchar(20),
                telefone VARCHAR(12),
                alergia TEXT(40),
                observacao TEXT(40)       
            );
        """)
        self.conn.commit();print('Banco de Dados Criado')
        self.desconecta_bd()

#criando uma função para usar as variaveis quantas vezes precisar
    def variaveis_do_cadastro(self):
        self.nome = self.nome_entry.get()
        self.cpf = self.cpf_entry.get()
        self.nascimento = self.nascimento_entry.get()
        self.sus = self.sus_entry.get()
        self.telefone = self.telefone_entry.get()
        self.alergia = self.alergia_entry.get()
        self.observacao = self.observacao_entry.get()

#função para o botão de cadastrar
    def add_aluno(self):
        self.variaveis_do_cadastro()
        self.conecta_bd()

        self.cursor.execute(""" INSERT INTO aluno ( nome, cpf, nascimento, sus, telefone, alergia, observacao )
             VALUES (?,?,?,?,?,?,?)""",(self.nome, self.cpf, self.nascimento, self.sus, self.telefone, self.alergia, self.observacao))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista()
        self.limpar_tela()

    def select_lista(self):   
        self.lista_alunos.delete(*self.lista_alunos.get_children())
        self.conecta_bd()

        lista = self.cursor.execute("""SELECT nome, cpf, nascimento, sus, telefone, alergia, observacao FROM aluno ORDER BY nome ASC;""")
        
        for i in lista:
            self.lista_alunos.insert("",END,values=i)
        self.desconecta_bd()
#duplo click para voltar os dados para o frame1 
    def duplo_click(self,event):
        self.limpar_tela()
        self.lista_alunos.selection()

        for n in self.lista_alunos.selection():
            col1,col2,col3,col4,col5,col6,col7 = self.lista_alunos.item(n,"values")
            self.nome_entry.insert(END,col1)
            self.cpf_entry.insert(END,col2)
            self.nascimento_entry.insert(END,col3)
            self.sus_entry.insert(END,col4)
            self.telefone_entry.insert(END,col5)
            self.alergia_entry.insert(END,col6)
            self.observacao_entry.insert(END,col7)

#função de deletar o cadastro não sabendo ainda porque porem o (self.cpf)precisou de (,) dentro do ()junto ao self do cpf para conseguir deletar.
    def deleta_cadastro(self):
        self.variaveis_do_cadastro()
        self.conecta_bd()
        self.cursor.execute(f""" DELETE FROM aluno WHERE cpf = ?""",[self.cpf])
        self.conn.commit()
        self.desconecta_bd()
        self.limpar_tela()
        self.select_lista()

    def alterar_cadastro(self):
        self.variaveis_do_cadastro()
        self.conecta_bd()
        self.cursor.execute(""" UPDATE aluno SET nome = ?, nascimento = ?, sus = ?,telefone = ?, alergia = ?, observacao = ?
                            WHERE cpf = ? """,(self.nome, self.nascimento,self.sus, self.telefone, self.alergia, self.observacao, self.cpf))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista()
        self.limpar_tela()

#criando uma classe para receber funções
class Aplicativo(Funcoes):
    def __init__(self):
        self.interface = interface
        self.tela()
        self.frame_tela()
        self.rotulos()
        self.entradas_de_dados()
        self.botoes()
        self.lista_frame2()
        self.montaTabela()
        self.select_lista()
        
        interface.mainloop()

#crinado uma função de Interface e estilizando a Interface

    def tela(self):
        self.interface.title('Cadastro de Alunos')
        self.interface.configure(background='#123456')
        self.interface.geometry('900x500')
        self.interface.resizable(True,True)
        self.interface.minsize(width=400, height=250)

#criando a separação de Frame de Tela  e 2

    def frame_tela(self):
        self.frame_1 = Frame(self.interface,bd=4,highlightbackground='#759feb',highlightthickness=2)
        self.frame_1.place(relx=0.02,rely=0.02,relwidth=0.96,relheight=0.55)
        
        self.frame_2 = Frame(self.interface,bd=4,highlightbackground='#759feb',highlightthickness=2)
        self.frame_2.place(relx=0.02,rely=0.59,relwidth=0.96,relheight=0.39)

#criando rótulos para a entrada de dados que serão cadastrados

    def rotulos(self):
        self.nome_label = Label(self.frame_1,text='Nome',font=('verdana',11,'bold'))
        self.nome_label.place(relx=0.01,rely=0.02,relwidth=0.13,relheight=0.12)

        self.cpf_label= Label(self.frame_1,text='CPF',font=('verdana',11,'bold'))
        self.cpf_label.place(relx=0.50,rely=0.02,relwidth=0.13,relheight=0.12)

        self.nascimento_label = Label(self.frame_1,text='Nascimento',font=('verdana',11,'bold'))
        self.nascimento_label.place(relx=0.01,rely=0.18,relwidth=0.13,relheight=0.12)

        self.sus_label = Label(self.frame_1,text='Nº SUS',font=('verdana',11,'bold'))
        self.sus_label.place(relx=0.01,rely=0.34,relwidth=0.13,relheight=0.12)

        self.telefone_label = Label(self.frame_1,text='Contato',font=('verdana',11,'bold'))
        self.telefone_label.place(relx=0.01,rely=0.49,relwidth=0.13,relheight=0.12)

        self.alergia_label = Label(self.frame_1,text='Alergia',font=('verdana',11,'bold'))
        self.alergia_label.place(relx=0.01,rely=0.66,relwidth=0.13,relheight=0.12)

        self.observacao_label = Label(self.frame_1,text='Observações', font=('verdana',11,'bold'))
        self.observacao_label.place(relx=0.01,rely=0.82,relwidth=0.13,relheight=0.12)

#Criando função de entrada que receberão os dados cadastrados
    
    def entradas_de_dados(self):
        self.nome_entry = Entry(self.frame_1,font=('arial',12))
        self.nome_entry.place(relx=0.15,rely=0.02,relwidth=0.37,relheight=0.12)

        self.cpf_entry = Entry(self.frame_1,font=('arial',12))
        self.cpf_entry.place(relx=0.60,rely=0.02,relwidth=0.2,relheight=0.12)

        self.nascimento_entry = Entry(self.frame_1,font=('arial',12))
        self.nascimento_entry.place(relx=0.15,rely=0.18,relwidth=0.37,relheight=0.12)

        self.sus_entry = Entry(self.frame_1,font=('arial',12))
        self.sus_entry.place(relx=0.15,rely=0.34,relwidth=0.37,relheight=0.12)

        self.telefone_entry = Entry(self.frame_1,font=('arial',12))
        self.telefone_entry.place(relx=0.15,rely=0.49,relwidth=0.37,relheight=0.12)

        self.alergia_entry = Entry(self.frame_1,font=('arial',12))
        self.alergia_entry.place(relx=0.15,rely=0.66,relwidth=0.37,relheight=0.12)

        self.observacao_entry = Entry(self.frame_1, font=('arial',12))
        self.observacao_entry.place(relx=0.15,rely=0.82,relwidth=0.37,relheight=0.12)

 #crinado botões CRUD, para Buscar, cadastrar, Limpar tela, Alterar e Deletar

    def botoes(self):
        self.buscar = Button(self.frame_1,text='BUSCAR',bd=4)
        self.buscar.place(relx=0.82,rely=0.02,relwidth=0.15,relheight=0.15)

        self.cadastrar = Button(self.frame_1,text='CADASTRAR',bd=4, command= self.add_aluno)
        self.cadastrar.place(relx=0.82,rely=0.21,relwidth=0.15,relheight=0.15)

        self.limpar = Button(self.frame_1,text='LIMPAR TELA',bd=4,command=self.limpar_tela)
        self.limpar.place(relx=0.82,rely=0.40,relwidth=0.15,relheight=0.15)

        self.alterar = Button(self.frame_1,text='ALTERAR',bd=4,command=self.alterar_cadastro)
        self.alterar.place(relx=0.82,rely=0.59,relwidth=0.15,relheight=0.15)

        self.deletar = Button(self.frame_1,text='DELETAR',bd=4,command=self.deleta_cadastro)
        self.deletar.place(relx=0.82,rely=0.78,relwidth=0.15,relheight=0.15)

#criando visualização no frame2 com o Treeview
    def lista_frame2(self):
        self.lista_alunos = ttk.Treeview(self.frame_2,height=3,columns=('col1','col2','col3','col4',
                                                                        'col5','col6','col7'))
#nomeando as colunas do treeview

        self.lista_alunos.heading('#0',text='')
        self.lista_alunos.heading('#1',text='Nome')
        self.lista_alunos.heading('#2',text='CPF')
        self.lista_alunos.heading('#3',text='Nascimento')
        self.lista_alunos.heading('#4',text='Nº do SUS')
        self.lista_alunos.heading('#5',text='Telefone')
        self.lista_alunos.heading('#6',text='Alergias')
        self.lista_alunos.heading('#7',text='Obs.')

#dimensionando as colunas, obs.a colula #0 precisa ser colocada pois ela é um padrão, entao para não ocupar espaça colocamos o menor valor

        self.lista_alunos.column('#0',width=0)
        self.lista_alunos.column('#1',width=150)
        self.lista_alunos.column('#2',width=50)
        self.lista_alunos.column('#3',width=50)
        self.lista_alunos.column('#4',width=50)
        self.lista_alunos.column('#5',width=50)
        self.lista_alunos.column('#6',width=50)
        self.lista_alunos.column('#7',width=100)

        self.lista_alunos.place(relx=0.01,rely=0.01,relheight=0.95,relwidth=0.95)

        self.scroolCadastro = Scrollbar(self.frame_2,orient='vertical', command=self.lista_alunos.yview)
        self.lista_alunos.configure(yscroll=self.scroolCadastro.set)
        self.scroolCadastro.place(relx=0.96,rely=0.01,relwidth=0.04,relheight=0.90)
        self.lista_alunos.bind("<Double-1>",self.duplo_click)


Aplicativo()